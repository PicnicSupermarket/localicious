// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering 'en' works as expected for all platforms 1`] = `
Result {
  "value": Array [
    Object {
      "data": "\\"Settings.PushPermissionsRequest.Title.COPY\\" = \\"Stay up to date\\";
\\"Settings.PushPermissionsRequest.Subtitle.COPY\\" = \\"Stay up to date\\";
\\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\" = \\"We support nesting as deep as you like\\";
\\"Delivery.Widget.Title.COPY\\" = \\"Help: %1$@\\";
\\"Delivery.Widget.SpecialCharacters.COPY\\" = \\"This > is a special <<Character>> & there are more\\";
\\"Delivery.Widget.MultilineStrings.COPY\\" = \\"This is a multiline string that may contain <a href=\\"about:blank\\">links</a>
You better watch out!\\";
\\"Accessible.RegularComponent.COPY\\" = \\"This is a component with accessiblity support\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\" = \\"This is the hint\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\" = \\"This is the label\\";
\\"Delivery.Widget.SubTitle.COPY.ZERO\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.ONE\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.OTHER\\" = \\"%1$d Pending Orders\\";
\\"Accessible.PluralComponent.COPY.ONE\\" = \\"The singular copy\\";
\\"Accessible.PluralComponent.COPY.OTHER\\" = \\"The plural copy\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.ONE\\" = \\"The singular hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.OTHER\\" = \\"The plural hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.ONE\\" = \\"The singular label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.OTHER\\" = \\"The plural label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ZERO\\" = \\"No value for this component\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ONE\\" = \\"The singular value\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.OTHER\\" = \\"The plural value\\";
",
      "path": ".//ios/en/Localizable.strings",
    },
    Object {
      "data": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
  <string name=\\"Checkout_OrderOverview_Total_COPY\\">Total price: %1$s</string>
  <string name=\\"Checkout_OrderOverview_Subtotal_COPY\\">Total price before taxes: %1$s</string>
  <string name=\\"Something_With_An_Arbitrary_Amount_Of_Nesting_COPY\\">We support nesting as deep as you like</string>
  <string name=\\"Delivery_Widget_Title_COPY\\">Help: %1$s</string>
  <string name=\\"Delivery_Widget_SpecialCharacters_COPY\\">This &gt; is a special &lt;&lt;Character&gt;&gt; &amp; there are more</string>
  <string name=\\"Delivery_Widget_MultilineStrings_COPY\\">This is a multiline string that may contain &lt;a href&#x3D;&quot;about:blank&quot;&gt;links&lt;/a&gt;
You better watch out!</string>
  <string name=\\"Accessible_RegularComponent_COPY\\">This is a component with accessiblity support</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_HINT\\">This is the hint</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_LABEL\\">This is the label</string>
  <plurals name=\\"Delivery_Widget_SubTitle_COPY\\">
    <item quantity=\\"zero\\">%1$d Pending order</item>
    <item quantity=\\"one\\">%1$d Pending order</item>
    <item quantity=\\"other\\">%1$d Pending Orders</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_COPY\\">
    <item quantity=\\"one\\">The singular copy</item>
    <item quantity=\\"other\\">The plural copy</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_HINT\\">
    <item quantity=\\"one\\">The singular hint</item>
    <item quantity=\\"other\\">The plural hint</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_LABEL\\">
    <item quantity=\\"one\\">The singular label</item>
    <item quantity=\\"other\\">The plural label</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_VALUE\\">
    <item quantity=\\"zero\\">No value for this component</item>
    <item quantity=\\"one\\">The singular value</item>
    <item quantity=\\"other\\">The plural value</item>
  </plurals>
</resources>
",
      "path": ".//android/en/strings.xml",
    },
    Object {
      "data": "import UIKit

protocol LocalizationProvider {
    var translationKey: String? { get }
    var accessibilityHintKey: String? { get }
    var accessibilityLabelKey: String? { get }
    var accessibilityValueKey: String? { get }
}

struct LocaliciousData: LocalizationProvider {
    let accessibilityIdentifier: String
    let accessibilityHintKey: String?
    let accessibilityLabelKey: String?
    let accessibilityValueKey: String?
    let translationKey: String?
}

enum LocaliciousQuantity: String {
    case zero = \\"ZERO\\"
    case one = \\"ONE\\"
    case other = \\"OTHER\\"

    init(quanitity: Int) {
        switch true {
        case quanitity == 0:
            self = .zero
        case quanitity == 1:
            self = .one
        default:
            self = .other
        }
    }
}

extension LocalizationProvider {
    var translation: String? {
        return translationKey.map(translation) ?? nil
    }

    var accessibilityHint: String? {
        return accessibilityHintKey.map(translation) ?? nil
    }

    var accessibilityLabel: String? {
        return accessibilityLabelKey.map(translation) ?? nil
    }

    var accessibilityValue: String? {
        return accessibilityValueKey.map(translation) ?? nil
    }

    private func translation(forKey key: String) -> String? {
        return NSLocalizedString(key, comment: \\"\\")
    }
}

extension UIButton {
    func setLocalicious(_ data: LocaliciousData, for controlState: UIControl.State) {
        setTitle(data.translation, for: controlState)
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

extension UILabel {
    func setLocalicious(_ data: LocaliciousData) {
        self.text = data.translation
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

struct L {
    struct Settings {
        struct PushPermissionsRequest {
            static let Title = LocaliciousData(
                accessibilityIdentifier: \\"Settings.PushPermissionsRequest.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Settings.PushPermissionsRequest.Title.COPY\\",
                translationArgs: []
            )
            static let Subtitle = LocaliciousData(
                accessibilityIdentifier: \\"Settings.PushPermissionsRequest.Subtitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Settings.PushPermissionsRequest.Subtitle.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Checkout {
        struct OrderOverview {
            static func Total(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Checkout.OrderOverview.Total\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Checkout.OrderOverview.Total.COPY\\",
                translationArgs: args
            )
            }
            static func Subtotal(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Checkout.OrderOverview.Subtotal\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Checkout.OrderOverview.Subtotal.COPY\\",
                translationArgs: args
            )
            }
        }
    }
    struct Something {
        struct With {
            struct An {
                struct Arbitrary {
                    struct Amount {
                        struct Of {
                            static let Nesting = LocaliciousData(
                                accessibilityIdentifier: \\"Something.With.An.Arbitrary.Amount.Of.Nesting\\",
                                accessibilityHintKey: nil,
                                accessibilityLabelKey: nil,
                                accessibilityValueKey: nil,
                                translationKey: \\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\",
                                translationArgs: []
                            )
                        }
                    }
                }
            }
        }
    }
    struct Delivery {
        struct Widget {
            static func Title(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.Title.COPY\\",
                translationArgs: args
            )
            }
            static func SubTitle(quantity: Int, args: CVarArg...) -> LocaliciousData {
                let quantityType = LocaliciousQuantity(quanitity: quantity)
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SubTitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SubTitle.COPY.\\\\(quantityType.rawValue)\\",
                translationArgs: args
            )
            }
            static let SpecialCharacters = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SpecialCharacters\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SpecialCharacters.COPY\\",
                translationArgs: []
            )
            static let MultilineStrings = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.MultilineStrings\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.MultilineStrings.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Accessible {
        static let RegularComponent = LocaliciousData(
            accessibilityIdentifier: \\"Accessible.RegularComponent\\",
            accessibilityHintKey: \\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\",
            accessibilityLabelKey: \\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\",
            accessibilityValueKey: nil,
            translationKey: \\"Accessible.RegularComponent.COPY\\",
            translationArgs: []
        )
        static func PluralComponent(quantity: Int) -> LocaliciousData {
            let quantityType = LocaliciousQuantity(quanitity: quantity)
            return LocaliciousData(
            accessibilityIdentifier: \\"Accessible.PluralComponent\\",
            accessibilityHintKey: \\"Accessible.PluralComponent.ACCESSIBILITY.HINT.\\\\(quantityType.rawValue)\\",
            accessibilityLabelKey: \\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.\\\\(quantityType.rawValue)\\",
            accessibilityValueKey: \\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.\\\\(quantityType.rawValue)\\",
            translationKey: \\"Accessible.PluralComponent.COPY.\\\\(quantityType.rawValue)\\",
            translationArgs: []
        )
        }
    }
}",
      "path": ".//ios/Localizable.swift",
    },
  ],
}
`;

exports[`rendering 'en' works as expected for android only 1`] = `
Result {
  "value": Array [
    Object {
      "data": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
  <string name=\\"Checkout_OrderOverview_Total_COPY\\">Total price: %1$s</string>
  <string name=\\"Checkout_OrderOverview_Subtotal_COPY\\">Total price before taxes: %1$s</string>
  <string name=\\"Something_With_An_Arbitrary_Amount_Of_Nesting_COPY\\">We support nesting as deep as you like</string>
  <string name=\\"Delivery_Widget_Title_COPY\\">Help: %1$s</string>
  <string name=\\"Delivery_Widget_SpecialCharacters_COPY\\">This &gt; is a special &lt;&lt;Character&gt;&gt; &amp; there are more</string>
  <string name=\\"Delivery_Widget_MultilineStrings_COPY\\">This is a multiline string that may contain &lt;a href&#x3D;&quot;about:blank&quot;&gt;links&lt;/a&gt;
You better watch out!</string>
  <string name=\\"Accessible_RegularComponent_COPY\\">This is a component with accessiblity support</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_HINT\\">This is the hint</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_LABEL\\">This is the label</string>
  <plurals name=\\"Delivery_Widget_SubTitle_COPY\\">
    <item quantity=\\"zero\\">%1$d Pending order</item>
    <item quantity=\\"one\\">%1$d Pending order</item>
    <item quantity=\\"other\\">%1$d Pending Orders</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_COPY\\">
    <item quantity=\\"one\\">The singular copy</item>
    <item quantity=\\"other\\">The plural copy</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_HINT\\">
    <item quantity=\\"one\\">The singular hint</item>
    <item quantity=\\"other\\">The plural hint</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_LABEL\\">
    <item quantity=\\"one\\">The singular label</item>
    <item quantity=\\"other\\">The plural label</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_VALUE\\">
    <item quantity=\\"zero\\">No value for this component</item>
    <item quantity=\\"one\\">The singular value</item>
    <item quantity=\\"other\\">The plural value</item>
  </plurals>
</resources>
",
      "path": ".//android/en/strings.xml",
    },
  ],
}
`;

exports[`rendering 'en' works as expected for iOS only 1`] = `
Result {
  "value": Array [
    Object {
      "data": "\\"Settings.PushPermissionsRequest.Title.COPY\\" = \\"Stay up to date\\";
\\"Settings.PushPermissionsRequest.Subtitle.COPY\\" = \\"Stay up to date\\";
\\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\" = \\"We support nesting as deep as you like\\";
\\"Delivery.Widget.Title.COPY\\" = \\"Help: %1$@\\";
\\"Delivery.Widget.SpecialCharacters.COPY\\" = \\"This > is a special <<Character>> & there are more\\";
\\"Delivery.Widget.MultilineStrings.COPY\\" = \\"This is a multiline string that may contain <a href=\\"about:blank\\">links</a>
You better watch out!\\";
\\"Accessible.RegularComponent.COPY\\" = \\"This is a component with accessiblity support\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\" = \\"This is the hint\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\" = \\"This is the label\\";
\\"Delivery.Widget.SubTitle.COPY.ZERO\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.ONE\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.OTHER\\" = \\"%1$d Pending Orders\\";
\\"Accessible.PluralComponent.COPY.ONE\\" = \\"The singular copy\\";
\\"Accessible.PluralComponent.COPY.OTHER\\" = \\"The plural copy\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.ONE\\" = \\"The singular hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.OTHER\\" = \\"The plural hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.ONE\\" = \\"The singular label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.OTHER\\" = \\"The plural label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ZERO\\" = \\"No value for this component\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ONE\\" = \\"The singular value\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.OTHER\\" = \\"The plural value\\";
",
      "path": ".//ios/en/Localizable.strings",
    },
    Object {
      "data": "import UIKit

protocol LocalizationProvider {
    var translationKey: String? { get }
    var accessibilityHintKey: String? { get }
    var accessibilityLabelKey: String? { get }
    var accessibilityValueKey: String? { get }
}

struct LocaliciousData: LocalizationProvider {
    let accessibilityIdentifier: String
    let accessibilityHintKey: String?
    let accessibilityLabelKey: String?
    let accessibilityValueKey: String?
    let translationKey: String?
}

enum LocaliciousQuantity: String {
    case zero = \\"ZERO\\"
    case one = \\"ONE\\"
    case other = \\"OTHER\\"

    init(quanitity: Int) {
        switch true {
        case quanitity == 0:
            self = .zero
        case quanitity == 1:
            self = .one
        default:
            self = .other
        }
    }
}

extension LocalizationProvider {
    var translation: String? {
        return translationKey.map(translation) ?? nil
    }

    var accessibilityHint: String? {
        return accessibilityHintKey.map(translation) ?? nil
    }

    var accessibilityLabel: String? {
        return accessibilityLabelKey.map(translation) ?? nil
    }

    var accessibilityValue: String? {
        return accessibilityValueKey.map(translation) ?? nil
    }

    private func translation(forKey key: String) -> String? {
        return NSLocalizedString(key, comment: \\"\\")
    }
}

extension UIButton {
    func setLocalicious(_ data: LocaliciousData, for controlState: UIControl.State) {
        setTitle(data.translation, for: controlState)
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

extension UILabel {
    func setLocalicious(_ data: LocaliciousData) {
        self.text = data.translation
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

struct L {
    struct Settings {
        struct PushPermissionsRequest {
            static let Title = LocaliciousData(
                accessibilityIdentifier: \\"Settings.PushPermissionsRequest.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Settings.PushPermissionsRequest.Title.COPY\\",
                translationArgs: []
            )
            static let Subtitle = LocaliciousData(
                accessibilityIdentifier: \\"Settings.PushPermissionsRequest.Subtitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Settings.PushPermissionsRequest.Subtitle.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Something {
        struct With {
            struct An {
                struct Arbitrary {
                    struct Amount {
                        struct Of {
                            static let Nesting = LocaliciousData(
                                accessibilityIdentifier: \\"Something.With.An.Arbitrary.Amount.Of.Nesting\\",
                                accessibilityHintKey: nil,
                                accessibilityLabelKey: nil,
                                accessibilityValueKey: nil,
                                translationKey: \\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\",
                                translationArgs: []
                            )
                        }
                    }
                }
            }
        }
    }
    struct Delivery {
        struct Widget {
            static func Title(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.Title.COPY\\",
                translationArgs: args
            )
            }
            static func SubTitle(quantity: Int, args: CVarArg...) -> LocaliciousData {
                let quantityType = LocaliciousQuantity(quanitity: quantity)
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SubTitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SubTitle.COPY.\\\\(quantityType.rawValue)\\",
                translationArgs: args
            )
            }
            static let SpecialCharacters = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SpecialCharacters\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SpecialCharacters.COPY\\",
                translationArgs: []
            )
            static let MultilineStrings = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.MultilineStrings\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.MultilineStrings.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Accessible {
        static let RegularComponent = LocaliciousData(
            accessibilityIdentifier: \\"Accessible.RegularComponent\\",
            accessibilityHintKey: \\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\",
            accessibilityLabelKey: \\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\",
            accessibilityValueKey: nil,
            translationKey: \\"Accessible.RegularComponent.COPY\\",
            translationArgs: []
        )
        static func PluralComponent(quantity: Int) -> LocaliciousData {
            let quantityType = LocaliciousQuantity(quanitity: quantity)
            return LocaliciousData(
            accessibilityIdentifier: \\"Accessible.PluralComponent\\",
            accessibilityHintKey: \\"Accessible.PluralComponent.ACCESSIBILITY.HINT.\\\\(quantityType.rawValue)\\",
            accessibilityLabelKey: \\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.\\\\(quantityType.rawValue)\\",
            accessibilityValueKey: \\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.\\\\(quantityType.rawValue)\\",
            translationKey: \\"Accessible.PluralComponent.COPY.\\\\(quantityType.rawValue)\\",
            translationArgs: []
        )
        }
    }
}",
      "path": ".//ios/Localizable.swift",
    },
  ],
}
`;

exports[`rendering multiple languages works as expected 1`] = `
Result {
  "value": Array [
    Object {
      "data": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
  <string name=\\"Checkout_OrderOverview_Total_COPY\\">Total price: %1$s</string>
  <string name=\\"Checkout_OrderOverview_Subtotal_COPY\\">Total price before taxes: %1$s</string>
  <string name=\\"Something_With_An_Arbitrary_Amount_Of_Nesting_COPY\\">We support nesting as deep as you like</string>
  <string name=\\"Delivery_Widget_Title_COPY\\">Help: %1$s</string>
  <string name=\\"Delivery_Widget_SpecialCharacters_COPY\\">This &gt; is a special &lt;&lt;Character&gt;&gt; &amp; there are more</string>
  <string name=\\"Delivery_Widget_MultilineStrings_COPY\\">This is a multiline string that may contain &lt;a href&#x3D;&quot;about:blank&quot;&gt;links&lt;/a&gt;
You better watch out!</string>
  <string name=\\"Accessible_RegularComponent_COPY\\">This is a component with accessiblity support</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_HINT\\">This is the hint</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_LABEL\\">This is the label</string>
  <plurals name=\\"Delivery_Widget_SubTitle_COPY\\">
    <item quantity=\\"zero\\">%1$d Pending order</item>
    <item quantity=\\"one\\">%1$d Pending order</item>
    <item quantity=\\"other\\">%1$d Pending Orders</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_COPY\\">
    <item quantity=\\"one\\">The singular copy</item>
    <item quantity=\\"other\\">The plural copy</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_HINT\\">
    <item quantity=\\"one\\">The singular hint</item>
    <item quantity=\\"other\\">The plural hint</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_LABEL\\">
    <item quantity=\\"one\\">The singular label</item>
    <item quantity=\\"other\\">The plural label</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_VALUE\\">
    <item quantity=\\"zero\\">No value for this component</item>
    <item quantity=\\"one\\">The singular value</item>
    <item quantity=\\"other\\">The plural value</item>
  </plurals>
</resources>
",
      "path": ".//android/en/strings.xml",
    },
    Object {
      "data": "\\"Settings.PushPermissionsRequest.Title.COPY\\" = \\"Stay up to date\\";
\\"Settings.PushPermissionsRequest.Subtitle.COPY\\" = \\"Stay up to date\\";
\\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\" = \\"We support nesting as deep as you like\\";
\\"Delivery.Widget.Title.COPY\\" = \\"Help: %1$@\\";
\\"Delivery.Widget.SpecialCharacters.COPY\\" = \\"This > is a special <<Character>> & there are more\\";
\\"Delivery.Widget.MultilineStrings.COPY\\" = \\"This is a multiline string that may contain <a href=\\"about:blank\\">links</a>
You better watch out!\\";
\\"Accessible.RegularComponent.COPY\\" = \\"This is a component with accessiblity support\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\" = \\"This is the hint\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\" = \\"This is the label\\";
\\"Delivery.Widget.SubTitle.COPY.ZERO\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.ONE\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.OTHER\\" = \\"%1$d Pending Orders\\";
\\"Accessible.PluralComponent.COPY.ONE\\" = \\"The singular copy\\";
\\"Accessible.PluralComponent.COPY.OTHER\\" = \\"The plural copy\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.ONE\\" = \\"The singular hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.OTHER\\" = \\"The plural hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.ONE\\" = \\"The singular label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.OTHER\\" = \\"The plural label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ZERO\\" = \\"No value for this component\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ONE\\" = \\"The singular value\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.OTHER\\" = \\"The plural value\\";
",
      "path": ".//ios/en/Localizable.strings",
    },
    Object {
      "data": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
  <string name=\\"Checkout_OrderOverview_Total_COPY\\">Totaal: %1$s</string>
  <string name=\\"Checkout_OrderOverview_Subtotal_COPY\\">Subtotaal: %1$s</string>
  <string name=\\"Something_With_An_Arbitrary_Amount_Of_Nesting_COPY\\">Je kan zo veel lagen maken als je zelf wil</string>
  <string name=\\"Delivery_Widget_Title_COPY\\">Help %1$s</string>
  <string name=\\"Delivery_Widget_SpecialCharacters_COPY\\">Dit &gt; is een speciaal &lt;&lt;Karakter&gt;&gt; &amp; zo zijn er meer</string>
  <string name=\\"Delivery_Widget_MultilineStrings_COPY\\">Dit is een string van meerdere regels die &lt;a href&#x3D;&quot;about:blank&quot;&gt;links&lt;/a&gt; kan bevatten.
Let maar eens op!</string>
  <string name=\\"Accessible_RegularComponent_COPY\\">Dit is een component met accessiblity support</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_HINT\\">Dit is de hint</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_LABEL\\">Dit is de label</string>
  <plurals name=\\"Delivery_Widget_SubTitle_COPY\\">
    <item quantity=\\"zero\\">%1$d Lopende bestelling</item>
    <item quantity=\\"one\\">%1$d Lopende bestelling</item>
    <item quantity=\\"other\\">%1$d Lopende bestellingen</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_COPY\\">
    <item quantity=\\"one\\">De enkelvoudige copy</item>
    <item quantity=\\"other\\">De meervoudige copy</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_HINT\\">
    <item quantity=\\"one\\">De enkelvoudige hint</item>
    <item quantity=\\"other\\">De meervoudige hint</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_LABEL\\">
    <item quantity=\\"one\\">De enkelvoudige label</item>
    <item quantity=\\"other\\">De meervoudige label</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_VALUE\\">
    <item quantity=\\"zero\\">Geen waarde voor dit component</item>
    <item quantity=\\"one\\">De enkelvoudige waarde</item>
    <item quantity=\\"other\\">The meervoudige waarde</item>
  </plurals>
</resources>
",
      "path": ".//android/nl/strings.xml",
    },
    Object {
      "data": "\\"Settings.PushPermissionsRequest.Title.COPY\\" = \\"Blijf op de hoogte\\";
\\"Settings.PushPermissionsRequest.Subtitle.COPY\\" = \\"Blijf op de hoogte\\";
\\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\" = \\"Je kan zo veel lagen maken als je zelf wil\\";
\\"Delivery.Widget.Title.COPY\\" = \\"Help %1$@\\";
\\"Delivery.Widget.SpecialCharacters.COPY\\" = \\"Dit > is een speciaal <<Karakter>> & zo zijn er meer\\";
\\"Delivery.Widget.MultilineStrings.COPY\\" = \\"Dit is een string van meerdere regels die <a href=\\"about:blank\\">links</a> kan bevatten.
Let maar eens op!\\";
\\"Accessible.RegularComponent.COPY\\" = \\"Dit is een component met accessiblity support\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\" = \\"Dit is de hint\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\" = \\"Dit is de label\\";
\\"Delivery.Widget.SubTitle.COPY.ZERO\\" = \\"%1$d Lopende bestelling\\";
\\"Delivery.Widget.SubTitle.COPY.ONE\\" = \\"%1$d Lopende bestelling\\";
\\"Delivery.Widget.SubTitle.COPY.OTHER\\" = \\"%1$d Lopende bestellingen\\";
\\"Accessible.PluralComponent.COPY.ONE\\" = \\"De enkelvoudige copy\\";
\\"Accessible.PluralComponent.COPY.OTHER\\" = \\"De meervoudige copy\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.ONE\\" = \\"De enkelvoudige hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.OTHER\\" = \\"De meervoudige hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.ONE\\" = \\"De enkelvoudige label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.OTHER\\" = \\"De meervoudige label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ZERO\\" = \\"Geen waarde voor dit component\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ONE\\" = \\"De enkelvoudige waarde\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.OTHER\\" = \\"The meervoudige waarde\\";
",
      "path": ".//ios/nl/Localizable.strings",
    },
    Object {
      "data": "import UIKit

protocol LocalizationProvider {
    var translationKey: String? { get }
    var accessibilityHintKey: String? { get }
    var accessibilityLabelKey: String? { get }
    var accessibilityValueKey: String? { get }
}

struct LocaliciousData: LocalizationProvider {
    let accessibilityIdentifier: String
    let accessibilityHintKey: String?
    let accessibilityLabelKey: String?
    let accessibilityValueKey: String?
    let translationKey: String?
}

enum LocaliciousQuantity: String {
    case zero = \\"ZERO\\"
    case one = \\"ONE\\"
    case other = \\"OTHER\\"

    init(quanitity: Int) {
        switch true {
        case quanitity == 0:
            self = .zero
        case quanitity == 1:
            self = .one
        default:
            self = .other
        }
    }
}

extension LocalizationProvider {
    var translation: String? {
        return translationKey.map(translation) ?? nil
    }

    var accessibilityHint: String? {
        return accessibilityHintKey.map(translation) ?? nil
    }

    var accessibilityLabel: String? {
        return accessibilityLabelKey.map(translation) ?? nil
    }

    var accessibilityValue: String? {
        return accessibilityValueKey.map(translation) ?? nil
    }

    private func translation(forKey key: String) -> String? {
        return NSLocalizedString(key, comment: \\"\\")
    }
}

extension UIButton {
    func setLocalicious(_ data: LocaliciousData, for controlState: UIControl.State) {
        setTitle(data.translation, for: controlState)
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

extension UILabel {
    func setLocalicious(_ data: LocaliciousData) {
        self.text = data.translation
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

struct L {
    struct Checkout {
        struct OrderOverview {
            static func Total(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Checkout.OrderOverview.Total\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Checkout.OrderOverview.Total.COPY\\",
                translationArgs: args
            )
            }
            static func Subtotal(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Checkout.OrderOverview.Subtotal\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Checkout.OrderOverview.Subtotal.COPY\\",
                translationArgs: args
            )
            }
        }
    }
    struct Settings {
        struct PushPermissionsRequest {
            static let Title = LocaliciousData(
                accessibilityIdentifier: \\"Settings.PushPermissionsRequest.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Settings.PushPermissionsRequest.Title.COPY\\",
                translationArgs: []
            )
            static let Subtitle = LocaliciousData(
                accessibilityIdentifier: \\"Settings.PushPermissionsRequest.Subtitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Settings.PushPermissionsRequest.Subtitle.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Something {
        struct With {
            struct An {
                struct Arbitrary {
                    struct Amount {
                        struct Of {
                            static let Nesting = LocaliciousData(
                                accessibilityIdentifier: \\"Something.With.An.Arbitrary.Amount.Of.Nesting\\",
                                accessibilityHintKey: nil,
                                accessibilityLabelKey: nil,
                                accessibilityValueKey: nil,
                                translationKey: \\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\",
                                translationArgs: []
                            )
                        }
                    }
                }
            }
        }
    }
    struct Delivery {
        struct Widget {
            static func Title(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.Title.COPY\\",
                translationArgs: args
            )
            }
            static func SubTitle(quantity: Int, args: CVarArg...) -> LocaliciousData {
                let quantityType = LocaliciousQuantity(quanitity: quantity)
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SubTitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SubTitle.COPY.\\\\(quantityType.rawValue)\\",
                translationArgs: args
            )
            }
            static let SpecialCharacters = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SpecialCharacters\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SpecialCharacters.COPY\\",
                translationArgs: []
            )
            static let MultilineStrings = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.MultilineStrings\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.MultilineStrings.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Accessible {
        static let RegularComponent = LocaliciousData(
            accessibilityIdentifier: \\"Accessible.RegularComponent\\",
            accessibilityHintKey: \\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\",
            accessibilityLabelKey: \\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\",
            accessibilityValueKey: nil,
            translationKey: \\"Accessible.RegularComponent.COPY\\",
            translationArgs: []
        )
        static func PluralComponent(quantity: Int) -> LocaliciousData {
            let quantityType = LocaliciousQuantity(quanitity: quantity)
            return LocaliciousData(
            accessibilityIdentifier: \\"Accessible.PluralComponent\\",
            accessibilityHintKey: \\"Accessible.PluralComponent.ACCESSIBILITY.HINT.\\\\(quantityType.rawValue)\\",
            accessibilityLabelKey: \\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.\\\\(quantityType.rawValue)\\",
            accessibilityValueKey: \\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.\\\\(quantityType.rawValue)\\",
            translationKey: \\"Accessible.PluralComponent.COPY.\\\\(quantityType.rawValue)\\",
            translationArgs: []
        )
        }
    }
}",
      "path": ".//ios/Localizable.swift",
    },
  ],
}
`;

exports[`rendering works for a Localicipe with only shared keys 1`] = `
Result {
  "value": Array [
    Object {
      "data": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
  <string name=\\"Something_With_An_Arbitrary_Amount_Of_Nesting_COPY\\">We support nesting as deep as you like</string>
  <string name=\\"Delivery_Widget_Title_COPY\\">Help: %1$s</string>
  <string name=\\"Delivery_Widget_SpecialCharacters_COPY\\">This &gt; is a special &lt;&lt;Character&gt;&gt; &amp; there are more</string>
  <string name=\\"Delivery_Widget_MultilineStrings_COPY\\">This is a multiline string that may contain &lt;a href&#x3D;&quot;about:blank&quot;&gt;links&lt;/a&gt;
You better watch out!</string>
  <string name=\\"Accessible_RegularComponent_COPY\\">This is a component with accessiblity support</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_HINT\\">This is the hint</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_LABEL\\">This is the label</string>
  <plurals name=\\"Delivery_Widget_SubTitle_COPY\\">
    <item quantity=\\"zero\\">%1$d Pending order</item>
    <item quantity=\\"one\\">%1$d Pending order</item>
    <item quantity=\\"other\\">%1$d Pending Orders</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_COPY\\">
    <item quantity=\\"one\\">The singular copy</item>
    <item quantity=\\"other\\">The plural copy</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_HINT\\">
    <item quantity=\\"one\\">The singular hint</item>
    <item quantity=\\"other\\">The plural hint</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_LABEL\\">
    <item quantity=\\"one\\">The singular label</item>
    <item quantity=\\"other\\">The plural label</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_VALUE\\">
    <item quantity=\\"zero\\">No value for this component</item>
    <item quantity=\\"one\\">The singular value</item>
    <item quantity=\\"other\\">The plural value</item>
  </plurals>
</resources>
",
      "path": ".//android/en/strings.xml",
    },
    Object {
      "data": "\\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\" = \\"We support nesting as deep as you like\\";
\\"Delivery.Widget.Title.COPY\\" = \\"Help: %1$@\\";
\\"Delivery.Widget.SpecialCharacters.COPY\\" = \\"This > is a special <<Character>> & there are more\\";
\\"Delivery.Widget.MultilineStrings.COPY\\" = \\"This is a multiline string that may contain <a href=\\"about:blank\\">links</a>
You better watch out!\\";
\\"Accessible.RegularComponent.COPY\\" = \\"This is a component with accessiblity support\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\" = \\"This is the hint\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\" = \\"This is the label\\";
\\"Delivery.Widget.SubTitle.COPY.ZERO\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.ONE\\" = \\"%1$d Pending order\\";
\\"Delivery.Widget.SubTitle.COPY.OTHER\\" = \\"%1$d Pending Orders\\";
\\"Accessible.PluralComponent.COPY.ONE\\" = \\"The singular copy\\";
\\"Accessible.PluralComponent.COPY.OTHER\\" = \\"The plural copy\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.ONE\\" = \\"The singular hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.OTHER\\" = \\"The plural hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.ONE\\" = \\"The singular label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.OTHER\\" = \\"The plural label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ZERO\\" = \\"No value for this component\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ONE\\" = \\"The singular value\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.OTHER\\" = \\"The plural value\\";
",
      "path": ".//ios/en/Localizable.strings",
    },
    Object {
      "data": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
  <string name=\\"Something_With_An_Arbitrary_Amount_Of_Nesting_COPY\\">Je kan zo veel lagen maken als je zelf wil</string>
  <string name=\\"Delivery_Widget_Title_COPY\\">Help %1$s</string>
  <string name=\\"Delivery_Widget_SpecialCharacters_COPY\\">Dit &gt; is een speciaal &lt;&lt;Karakter&gt;&gt; &amp; zo zijn er meer</string>
  <string name=\\"Delivery_Widget_MultilineStrings_COPY\\">Dit is een string van meerdere regels die &lt;a href&#x3D;&quot;about:blank&quot;&gt;links&lt;/a&gt; kan bevatten.
Let maar eens op!</string>
  <string name=\\"Accessible_RegularComponent_COPY\\">Dit is een component met accessiblity support</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_HINT\\">Dit is de hint</string>
  <string name=\\"Accessible_RegularComponent_ACCESSIBILITY_LABEL\\">Dit is de label</string>
  <plurals name=\\"Delivery_Widget_SubTitle_COPY\\">
    <item quantity=\\"zero\\">%1$d Lopende bestelling</item>
    <item quantity=\\"one\\">%1$d Lopende bestelling</item>
    <item quantity=\\"other\\">%1$d Lopende bestellingen</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_COPY\\">
    <item quantity=\\"one\\">De enkelvoudige copy</item>
    <item quantity=\\"other\\">De meervoudige copy</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_HINT\\">
    <item quantity=\\"one\\">De enkelvoudige hint</item>
    <item quantity=\\"other\\">De meervoudige hint</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_LABEL\\">
    <item quantity=\\"one\\">De enkelvoudige label</item>
    <item quantity=\\"other\\">De meervoudige label</item>
  </plurals>
  <plurals name=\\"Accessible_PluralComponent_ACCESSIBILITY_VALUE\\">
    <item quantity=\\"zero\\">Geen waarde voor dit component</item>
    <item quantity=\\"one\\">De enkelvoudige waarde</item>
    <item quantity=\\"other\\">The meervoudige waarde</item>
  </plurals>
</resources>
",
      "path": ".//android/nl/strings.xml",
    },
    Object {
      "data": "\\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\" = \\"Je kan zo veel lagen maken als je zelf wil\\";
\\"Delivery.Widget.Title.COPY\\" = \\"Help %1$@\\";
\\"Delivery.Widget.SpecialCharacters.COPY\\" = \\"Dit > is een speciaal <<Karakter>> & zo zijn er meer\\";
\\"Delivery.Widget.MultilineStrings.COPY\\" = \\"Dit is een string van meerdere regels die <a href=\\"about:blank\\">links</a> kan bevatten.
Let maar eens op!\\";
\\"Accessible.RegularComponent.COPY\\" = \\"Dit is een component met accessiblity support\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\" = \\"Dit is de hint\\";
\\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\" = \\"Dit is de label\\";
\\"Delivery.Widget.SubTitle.COPY.ZERO\\" = \\"%1$d Lopende bestelling\\";
\\"Delivery.Widget.SubTitle.COPY.ONE\\" = \\"%1$d Lopende bestelling\\";
\\"Delivery.Widget.SubTitle.COPY.OTHER\\" = \\"%1$d Lopende bestellingen\\";
\\"Accessible.PluralComponent.COPY.ONE\\" = \\"De enkelvoudige copy\\";
\\"Accessible.PluralComponent.COPY.OTHER\\" = \\"De meervoudige copy\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.ONE\\" = \\"De enkelvoudige hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.HINT.OTHER\\" = \\"De meervoudige hint\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.ONE\\" = \\"De enkelvoudige label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.OTHER\\" = \\"De meervoudige label\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ZERO\\" = \\"Geen waarde voor dit component\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.ONE\\" = \\"De enkelvoudige waarde\\";
\\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.OTHER\\" = \\"The meervoudige waarde\\";
",
      "path": ".//ios/nl/Localizable.strings",
    },
    Object {
      "data": "import UIKit

protocol LocalizationProvider {
    var translationKey: String? { get }
    var accessibilityHintKey: String? { get }
    var accessibilityLabelKey: String? { get }
    var accessibilityValueKey: String? { get }
}

struct LocaliciousData: LocalizationProvider {
    let accessibilityIdentifier: String
    let accessibilityHintKey: String?
    let accessibilityLabelKey: String?
    let accessibilityValueKey: String?
    let translationKey: String?
}

enum LocaliciousQuantity: String {
    case zero = \\"ZERO\\"
    case one = \\"ONE\\"
    case other = \\"OTHER\\"

    init(quanitity: Int) {
        switch true {
        case quanitity == 0:
            self = .zero
        case quanitity == 1:
            self = .one
        default:
            self = .other
        }
    }
}

extension LocalizationProvider {
    var translation: String? {
        return translationKey.map(translation) ?? nil
    }

    var accessibilityHint: String? {
        return accessibilityHintKey.map(translation) ?? nil
    }

    var accessibilityLabel: String? {
        return accessibilityLabelKey.map(translation) ?? nil
    }

    var accessibilityValue: String? {
        return accessibilityValueKey.map(translation) ?? nil
    }

    private func translation(forKey key: String) -> String? {
        return NSLocalizedString(key, comment: \\"\\")
    }
}

extension UIButton {
    func setLocalicious(_ data: LocaliciousData, for controlState: UIControl.State) {
        setTitle(data.translation, for: controlState)
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

extension UILabel {
    func setLocalicious(_ data: LocaliciousData) {
        self.text = data.translation
        self.accessibilityIdentifier = data.accessibilityIdentifier
        self.accessibilityValue = data.accessibilityValue
        self.accessibilityHint = data.accessibilityHint
        self.accessibilityLabel = data.accessibilityLabel
    }
}

struct L {
    struct Something {
        struct With {
            struct An {
                struct Arbitrary {
                    struct Amount {
                        struct Of {
                            static let Nesting = LocaliciousData(
                                accessibilityIdentifier: \\"Something.With.An.Arbitrary.Amount.Of.Nesting\\",
                                accessibilityHintKey: nil,
                                accessibilityLabelKey: nil,
                                accessibilityValueKey: nil,
                                translationKey: \\"Something.With.An.Arbitrary.Amount.Of.Nesting.COPY\\",
                                translationArgs: []
                            )
                        }
                    }
                }
            }
        }
    }
    struct Delivery {
        struct Widget {
            static func Title(args: CVarArg...) -> LocaliciousData {
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.Title\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.Title.COPY\\",
                translationArgs: args
            )
            }
            static func SubTitle(quantity: Int, args: CVarArg...) -> LocaliciousData {
                let quantityType = LocaliciousQuantity(quanitity: quantity)
                return LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SubTitle\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SubTitle.COPY.\\\\(quantityType.rawValue)\\",
                translationArgs: args
            )
            }
            static let SpecialCharacters = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.SpecialCharacters\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.SpecialCharacters.COPY\\",
                translationArgs: []
            )
            static let MultilineStrings = LocaliciousData(
                accessibilityIdentifier: \\"Delivery.Widget.MultilineStrings\\",
                accessibilityHintKey: nil,
                accessibilityLabelKey: nil,
                accessibilityValueKey: nil,
                translationKey: \\"Delivery.Widget.MultilineStrings.COPY\\",
                translationArgs: []
            )
        }
    }
    struct Accessible {
        static let RegularComponent = LocaliciousData(
            accessibilityIdentifier: \\"Accessible.RegularComponent\\",
            accessibilityHintKey: \\"Accessible.RegularComponent.ACCESSIBILITY.HINT\\",
            accessibilityLabelKey: \\"Accessible.RegularComponent.ACCESSIBILITY.LABEL\\",
            accessibilityValueKey: nil,
            translationKey: \\"Accessible.RegularComponent.COPY\\",
            translationArgs: []
        )
        static func PluralComponent(quantity: Int) -> LocaliciousData {
            let quantityType = LocaliciousQuantity(quanitity: quantity)
            return LocaliciousData(
            accessibilityIdentifier: \\"Accessible.PluralComponent\\",
            accessibilityHintKey: \\"Accessible.PluralComponent.ACCESSIBILITY.HINT.\\\\(quantityType.rawValue)\\",
            accessibilityLabelKey: \\"Accessible.PluralComponent.ACCESSIBILITY.LABEL.\\\\(quantityType.rawValue)\\",
            accessibilityValueKey: \\"Accessible.PluralComponent.ACCESSIBILITY.VALUE.\\\\(quantityType.rawValue)\\",
            translationKey: \\"Accessible.PluralComponent.COPY.\\\\(quantityType.rawValue)\\",
            translationArgs: []
        )
        }
    }
}",
      "path": ".//ios/Localizable.swift",
    },
  ],
}
`;
